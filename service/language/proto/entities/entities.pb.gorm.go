// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: service/language/proto/entities/entities.proto

/*
Package entities is a generated protocol buffer package.

It is generated from these files:
	service/language/proto/entities/entities.proto

It has these top-level messages:
	Skill
	Word
	Language
*/
package entities

import context "context"
import fmt "fmt"
import strings "strings"
import time "time"

import errors1 "github.com/infobloxopen/protoc-gen-gorm/errors"
import field_mask1 "google.golang.org/genproto/protobuf/field_mask"
import go_uuid1 "github.com/satori/go.uuid"
import gorm1 "github.com/jinzhu/gorm"
import gorm2 "github.com/infobloxopen/atlas-app-toolkit/gorm"
import ptypes1 "github.com/golang/protobuf/ptypes"
import types1 "github.com/infobloxopen/protoc-gen-gorm/types"

import math "math"
import _ "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf1 "github.com/golang/protobuf/ptypes/wrappers"
import _ "github.com/envoyproxy/protoc-gen-validate/validate"

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = math.Inf

type SkillORM struct {
	Category     *string    `gorm:"size:100"`
	CreatedAt    *time.Time `gorm:"not null"`
	DeletedAt    *time.Time `gorm:"index:idx_skills_deleted_at"`
	Dependencies *string
	Description  *string
	Disabled     bool
	Id           go_uuid1.UUID `gorm:"type:uuid;primary_key;unique;default:uuid_generate_v4();not null"`
	Index        int32         `gorm:"not null"`
	Language     *LanguageORM  `gorm:"foreignkey:SkillId;association_foreignkey:Id;preload:true"`
	LanguageId   *go_uuid1.UUID
	LessonNumber int32 `gorm:"not null"`
	Locked       bool
	Title        string `gorm:"size:50;not null"`
	Type         *string
	UpdatedAt    *time.Time `gorm:"not null"`
	UrlTitle     string     `gorm:"size:100;not null"`
	WordId       *go_uuid1.UUID
	Words        []*WordORM `gorm:"foreignkey:SkillId;association_foreignkey:Id;preload:true"`
}

// TableName overrides the default tablename generated by GORM
func (SkillORM) TableName() string {
	return "skills"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Skill) ToORM(ctx context.Context) (SkillORM, error) {
	to := SkillORM{}
	var err error
	if prehook, ok := interface{}(m).(SkillWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	if m.Id != nil {
		to.Id, err = go_uuid1.FromString(m.Id.Value)
		if err != nil {
			return to, err
		}
	} else {
		to.Id = go_uuid1.Nil
	}
	if m.CreatedAt != nil {
		var t time.Time
		if t, err = ptypes1.Timestamp(m.CreatedAt); err != nil {
			return to, err
		}
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		var t time.Time
		if t, err = ptypes1.Timestamp(m.UpdatedAt); err != nil {
			return to, err
		}
		to.UpdatedAt = &t
	}
	if m.DeletedAt != nil {
		var t time.Time
		if t, err = ptypes1.Timestamp(m.DeletedAt); err != nil {
			return to, err
		}
		to.DeletedAt = &t
	}
	if m.Dependencies != nil {
		v := m.Dependencies.Value
		to.Dependencies = &v
	}
	to.Disabled = m.Disabled
	to.LessonNumber = m.LessonNumber
	if m.Description != nil {
		v := m.Description.Value
		to.Description = &v
	}
	to.Locked = m.Locked
	if m.Type != nil {
		v := m.Type.Value
		to.Type = &v
	}
	to.Title = m.Title
	to.UrlTitle = m.UrlTitle
	if m.Category != nil {
		v := m.Category.Value
		to.Category = &v
	}
	to.Index = m.Index
	if m.Language != nil {
		tempLanguage, err := m.Language.ToORM(ctx)
		if err != nil {
			return to, err
		}
		to.Language = &tempLanguage
	}
	for _, v := range m.Words {
		if v != nil {
			if tempWords, cErr := v.ToORM(ctx); cErr == nil {
				to.Words = append(to.Words, &tempWords)
			} else {
				return to, cErr
			}
		} else {
			to.Words = append(to.Words, nil)
		}
	}
	if posthook, ok := interface{}(m).(SkillWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *SkillORM) ToPB(ctx context.Context) (Skill, error) {
	to := Skill{}
	var err error
	if prehook, ok := interface{}(m).(SkillWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = &types1.UUID{Value: m.Id.String()}
	if m.CreatedAt != nil {
		if to.CreatedAt, err = ptypes1.TimestampProto(*m.CreatedAt); err != nil {
			return to, err
		}
	}
	if m.UpdatedAt != nil {
		if to.UpdatedAt, err = ptypes1.TimestampProto(*m.UpdatedAt); err != nil {
			return to, err
		}
	}
	if m.DeletedAt != nil {
		if to.DeletedAt, err = ptypes1.TimestampProto(*m.DeletedAt); err != nil {
			return to, err
		}
	}
	if m.Dependencies != nil {
		to.Dependencies = &google_protobuf1.StringValue{Value: *m.Dependencies}
	}
	to.Disabled = m.Disabled
	to.LessonNumber = m.LessonNumber
	if m.Description != nil {
		to.Description = &google_protobuf1.StringValue{Value: *m.Description}
	}
	to.Locked = m.Locked
	if m.Type != nil {
		to.Type = &google_protobuf1.StringValue{Value: *m.Type}
	}
	to.Title = m.Title
	to.UrlTitle = m.UrlTitle
	if m.Category != nil {
		to.Category = &google_protobuf1.StringValue{Value: *m.Category}
	}
	to.Index = m.Index
	if m.Language != nil {
		tempLanguage, err := m.Language.ToPB(ctx)
		if err != nil {
			return to, err
		}
		to.Language = &tempLanguage
	}
	for _, v := range m.Words {
		if v != nil {
			if tempWords, cErr := v.ToPB(ctx); cErr == nil {
				to.Words = append(to.Words, &tempWords)
			} else {
				return to, cErr
			}
		} else {
			to.Words = append(to.Words, nil)
		}
	}
	if posthook, ok := interface{}(m).(SkillWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Skill the arg will be the target, the caller the one being converted from

// SkillBeforeToORM called before default ToORM code
type SkillWithBeforeToORM interface {
	BeforeToORM(context.Context, *SkillORM) error
}

// SkillAfterToORM called after default ToORM code
type SkillWithAfterToORM interface {
	AfterToORM(context.Context, *SkillORM) error
}

// SkillBeforeToPB called before default ToPB code
type SkillWithBeforeToPB interface {
	BeforeToPB(context.Context, *Skill) error
}

// SkillAfterToPB called after default ToPB code
type SkillWithAfterToPB interface {
	AfterToPB(context.Context, *Skill) error
}

type WordORM struct {
	AudioSrc   string        `gorm:"size:255;not null"`
	Content    string        `gorm:"not null"`
	CreatedAt  *time.Time    `gorm:"not null"`
	DeletedAt  *time.Time    `gorm:"index:idx_words_deleted_at"`
	Id         go_uuid1.UUID `gorm:"type:uuid;primary_key;unique;default:uuid_generate_v4();not null"`
	Language   *LanguageORM  `gorm:"foreignkey:WordId;association_foreignkey:Id;preload:true"`
	LanguageId *go_uuid1.UUID
	Skill      *SkillORM `gorm:"foreignkey:WordId;association_foreignkey:Id;preload:true"`
	SkillId    *go_uuid1.UUID
	UpdatedAt  *time.Time `gorm:"not null"`
}

// TableName overrides the default tablename generated by GORM
func (WordORM) TableName() string {
	return "words"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Word) ToORM(ctx context.Context) (WordORM, error) {
	to := WordORM{}
	var err error
	if prehook, ok := interface{}(m).(WordWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	if m.Id != nil {
		to.Id, err = go_uuid1.FromString(m.Id.Value)
		if err != nil {
			return to, err
		}
	} else {
		to.Id = go_uuid1.Nil
	}
	if m.CreatedAt != nil {
		var t time.Time
		if t, err = ptypes1.Timestamp(m.CreatedAt); err != nil {
			return to, err
		}
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		var t time.Time
		if t, err = ptypes1.Timestamp(m.UpdatedAt); err != nil {
			return to, err
		}
		to.UpdatedAt = &t
	}
	if m.DeletedAt != nil {
		var t time.Time
		if t, err = ptypes1.Timestamp(m.DeletedAt); err != nil {
			return to, err
		}
		to.DeletedAt = &t
	}
	to.Content = m.Content
	to.AudioSrc = m.AudioSrc
	if m.Language != nil {
		tempLanguage, err := m.Language.ToORM(ctx)
		if err != nil {
			return to, err
		}
		to.Language = &tempLanguage
	}
	if m.Skill != nil {
		tempSkill, err := m.Skill.ToORM(ctx)
		if err != nil {
			return to, err
		}
		to.Skill = &tempSkill
	}
	if posthook, ok := interface{}(m).(WordWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *WordORM) ToPB(ctx context.Context) (Word, error) {
	to := Word{}
	var err error
	if prehook, ok := interface{}(m).(WordWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = &types1.UUID{Value: m.Id.String()}
	if m.CreatedAt != nil {
		if to.CreatedAt, err = ptypes1.TimestampProto(*m.CreatedAt); err != nil {
			return to, err
		}
	}
	if m.UpdatedAt != nil {
		if to.UpdatedAt, err = ptypes1.TimestampProto(*m.UpdatedAt); err != nil {
			return to, err
		}
	}
	if m.DeletedAt != nil {
		if to.DeletedAt, err = ptypes1.TimestampProto(*m.DeletedAt); err != nil {
			return to, err
		}
	}
	to.Content = m.Content
	to.AudioSrc = m.AudioSrc
	if m.Language != nil {
		tempLanguage, err := m.Language.ToPB(ctx)
		if err != nil {
			return to, err
		}
		to.Language = &tempLanguage
	}
	if m.Skill != nil {
		tempSkill, err := m.Skill.ToPB(ctx)
		if err != nil {
			return to, err
		}
		to.Skill = &tempSkill
	}
	if posthook, ok := interface{}(m).(WordWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Word the arg will be the target, the caller the one being converted from

// WordBeforeToORM called before default ToORM code
type WordWithBeforeToORM interface {
	BeforeToORM(context.Context, *WordORM) error
}

// WordAfterToORM called after default ToORM code
type WordWithAfterToORM interface {
	AfterToORM(context.Context, *WordORM) error
}

// WordBeforeToPB called before default ToPB code
type WordWithBeforeToPB interface {
	BeforeToPB(context.Context, *Word) error
}

// WordAfterToPB called after default ToPB code
type WordWithAfterToPB interface {
	AfterToPB(context.Context, *Word) error
}

type LanguageORM struct {
	Abbreviation string        `gorm:"size:10;not null"`
	CreatedAt    *time.Time    `gorm:"not null"`
	DeletedAt    *time.Time    `gorm:"index:idx_languages_deleted_at"`
	FlagSrc      string        `gorm:"size:255;not null"`
	Id           go_uuid1.UUID `gorm:"type:uuid;primary_key;unique;default:uuid_generate_v4();not null"`
	Name         string        `gorm:"size:100;not null"`
	SkillId      *go_uuid1.UUID
	Skills       []*SkillORM `gorm:"foreignkey:LanguageId;association_foreignkey:Id;preload:true"`
	UpdatedAt    *time.Time  `gorm:"not null"`
	WordId       *go_uuid1.UUID
	Words        []*WordORM `gorm:"foreignkey:LanguageId;association_foreignkey:Id;preload:true"`
}

// TableName overrides the default tablename generated by GORM
func (LanguageORM) TableName() string {
	return "languages"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Language) ToORM(ctx context.Context) (LanguageORM, error) {
	to := LanguageORM{}
	var err error
	if prehook, ok := interface{}(m).(LanguageWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	if m.Id != nil {
		to.Id, err = go_uuid1.FromString(m.Id.Value)
		if err != nil {
			return to, err
		}
	} else {
		to.Id = go_uuid1.Nil
	}
	if m.CreatedAt != nil {
		var t time.Time
		if t, err = ptypes1.Timestamp(m.CreatedAt); err != nil {
			return to, err
		}
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		var t time.Time
		if t, err = ptypes1.Timestamp(m.UpdatedAt); err != nil {
			return to, err
		}
		to.UpdatedAt = &t
	}
	if m.DeletedAt != nil {
		var t time.Time
		if t, err = ptypes1.Timestamp(m.DeletedAt); err != nil {
			return to, err
		}
		to.DeletedAt = &t
	}
	to.Name = m.Name
	to.Abbreviation = m.Abbreviation
	to.FlagSrc = m.FlagSrc
	for _, v := range m.Words {
		if v != nil {
			if tempWords, cErr := v.ToORM(ctx); cErr == nil {
				to.Words = append(to.Words, &tempWords)
			} else {
				return to, cErr
			}
		} else {
			to.Words = append(to.Words, nil)
		}
	}
	for _, v := range m.Skills {
		if v != nil {
			if tempSkills, cErr := v.ToORM(ctx); cErr == nil {
				to.Skills = append(to.Skills, &tempSkills)
			} else {
				return to, cErr
			}
		} else {
			to.Skills = append(to.Skills, nil)
		}
	}
	if posthook, ok := interface{}(m).(LanguageWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *LanguageORM) ToPB(ctx context.Context) (Language, error) {
	to := Language{}
	var err error
	if prehook, ok := interface{}(m).(LanguageWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = &types1.UUID{Value: m.Id.String()}
	if m.CreatedAt != nil {
		if to.CreatedAt, err = ptypes1.TimestampProto(*m.CreatedAt); err != nil {
			return to, err
		}
	}
	if m.UpdatedAt != nil {
		if to.UpdatedAt, err = ptypes1.TimestampProto(*m.UpdatedAt); err != nil {
			return to, err
		}
	}
	if m.DeletedAt != nil {
		if to.DeletedAt, err = ptypes1.TimestampProto(*m.DeletedAt); err != nil {
			return to, err
		}
	}
	to.Name = m.Name
	to.Abbreviation = m.Abbreviation
	to.FlagSrc = m.FlagSrc
	for _, v := range m.Words {
		if v != nil {
			if tempWords, cErr := v.ToPB(ctx); cErr == nil {
				to.Words = append(to.Words, &tempWords)
			} else {
				return to, cErr
			}
		} else {
			to.Words = append(to.Words, nil)
		}
	}
	for _, v := range m.Skills {
		if v != nil {
			if tempSkills, cErr := v.ToPB(ctx); cErr == nil {
				to.Skills = append(to.Skills, &tempSkills)
			} else {
				return to, cErr
			}
		} else {
			to.Skills = append(to.Skills, nil)
		}
	}
	if posthook, ok := interface{}(m).(LanguageWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Language the arg will be the target, the caller the one being converted from

// LanguageBeforeToORM called before default ToORM code
type LanguageWithBeforeToORM interface {
	BeforeToORM(context.Context, *LanguageORM) error
}

// LanguageAfterToORM called after default ToORM code
type LanguageWithAfterToORM interface {
	AfterToORM(context.Context, *LanguageORM) error
}

// LanguageBeforeToPB called before default ToPB code
type LanguageWithBeforeToPB interface {
	BeforeToPB(context.Context, *Language) error
}

// LanguageAfterToPB called after default ToPB code
type LanguageWithAfterToPB interface {
	AfterToPB(context.Context, *Language) error
}

// DefaultCreateSkill executes a basic gorm create call
func DefaultCreateSkill(ctx context.Context, in *Skill, db *gorm1.DB) (*Skill, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SkillORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SkillORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type SkillORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type SkillORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm1.DB) error
}

// DefaultReadSkill executes a basic gorm read call
func DefaultReadSkill(ctx context.Context, in *Skill, db *gorm1.DB) (*Skill, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == go_uuid1.Nil {
		return nil, errors1.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(SkillORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm2.ApplyFieldSelection(ctx, db, nil, &SkillORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SkillORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := SkillORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(SkillORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type SkillORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type SkillORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type SkillORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm1.DB) error
}

func DefaultDeleteSkill(ctx context.Context, in *Skill, db *gorm1.DB) error {
	if in == nil {
		return errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == go_uuid1.Nil {
		return errors1.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(SkillORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&SkillORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(SkillORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type SkillORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type SkillORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm1.DB) error
}

func DefaultDeleteSkillSet(ctx context.Context, in []*Skill, db *gorm1.DB) error {
	if in == nil {
		return errors1.NilArgumentError
	}
	var err error
	keys := []go_uuid1.UUID{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == go_uuid1.Nil {
			return errors1.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&SkillORM{})).(SkillORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&SkillORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&SkillORM{})).(SkillORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type SkillORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Skill, *gorm1.DB) (*gorm1.DB, error)
}
type SkillORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Skill, *gorm1.DB) error
}

// DefaultStrictUpdateSkill clears first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateSkill(ctx context.Context, in *Skill, db *gorm1.DB) (*Skill, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateSkill")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &SkillORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(SkillORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	filterLanguage := LanguageORM{}
	if ormObj.Id == go_uuid1.Nil {
		return nil, errors1.EmptyIdError
	}
	filterLanguage.SkillId = new(go_uuid1.UUID)
	*filterLanguage.SkillId = ormObj.Id
	if err = db.Where(filterLanguage).Delete(LanguageORM{}).Error; err != nil {
		return nil, err
	}
	filterWords := WordORM{}
	if ormObj.Id == go_uuid1.Nil {
		return nil, errors1.EmptyIdError
	}
	filterWords.SkillId = new(go_uuid1.UUID)
	*filterWords.SkillId = ormObj.Id
	if err = db.Where(filterWords).Delete(WordORM{}).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SkillORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SkillORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type SkillORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type SkillORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type SkillORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm1.DB) error
}

// DefaultPatchSkill executes a basic gorm update call with patch behavior
func DefaultPatchSkill(ctx context.Context, in *Skill, updateMask *field_mask1.FieldMask, db *gorm1.DB) (*Skill, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	var pbObj Skill
	var err error
	if hook, ok := interface{}(&pbObj).(SkillWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadSkill(ctx, &Skill{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(SkillWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskSkill(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(SkillWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateSkill(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(SkillWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type SkillWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Skill, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type SkillWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Skill, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type SkillWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Skill, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type SkillWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Skill, *field_mask1.FieldMask, *gorm1.DB) error
}

// DefaultPatchSetSkill executes a bulk gorm update call with patch behavior
func DefaultPatchSetSkill(ctx context.Context, objects []*Skill, updateMasks []*field_mask1.FieldMask, db *gorm1.DB) ([]*Skill, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors1.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Skill, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchSkill(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskSkill patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskSkill(ctx context.Context, patchee *Skill, patcher *Skill, updateMask *field_mask1.FieldMask, prefix string, db *gorm1.DB) (*Skill, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors1.NilArgumentError
	}
	var err error
	var updatedLanguage bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"CreatedAt" {
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if f == prefix+"UpdatedAt" {
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
		if f == prefix+"DeletedAt" {
			patchee.DeletedAt = patcher.DeletedAt
			continue
		}
		if f == prefix+"Dependencies" {
			patchee.Dependencies = patcher.Dependencies
			continue
		}
		if f == prefix+"Disabled" {
			patchee.Disabled = patcher.Disabled
			continue
		}
		if f == prefix+"LessonNumber" {
			patchee.LessonNumber = patcher.LessonNumber
			continue
		}
		if f == prefix+"Description" {
			patchee.Description = patcher.Description
			continue
		}
		if f == prefix+"Locked" {
			patchee.Locked = patcher.Locked
			continue
		}
		if f == prefix+"Type" {
			patchee.Type = patcher.Type
			continue
		}
		if f == prefix+"Title" {
			patchee.Title = patcher.Title
			continue
		}
		if f == prefix+"UrlTitle" {
			patchee.UrlTitle = patcher.UrlTitle
			continue
		}
		if f == prefix+"Category" {
			patchee.Category = patcher.Category
			continue
		}
		if f == prefix+"Index" {
			patchee.Index = patcher.Index
			continue
		}
		if !updatedLanguage && strings.HasPrefix(f, prefix+"Language.") {
			updatedLanguage = true
			if patcher.Language == nil {
				patchee.Language = nil
				continue
			}
			if patchee.Language == nil {
				patchee.Language = &Language{}
			}
			if o, err := DefaultApplyFieldMaskLanguage(ctx, patchee.Language, patcher.Language, &field_mask1.FieldMask{Paths: updateMask.Paths[i:]}, prefix+"Language.", db); err != nil {
				return nil, err
			} else {
				patchee.Language = o
			}
			continue
		}
		if f == prefix+"Language" {
			updatedLanguage = true
			patchee.Language = patcher.Language
			continue
		}
		if f == prefix+"Words" {
			patchee.Words = patcher.Words
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListSkill executes a gorm list call
func DefaultListSkill(ctx context.Context, db *gorm1.DB) ([]*Skill, error) {
	in := Skill{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SkillORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm2.ApplyCollectionOperators(ctx, db, &SkillORM{}, &Skill{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SkillORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []SkillORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SkillORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Skill{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type SkillORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type SkillORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type SkillORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm1.DB, *[]SkillORM) error
}

// DefaultCreateWord executes a basic gorm create call
func DefaultCreateWord(ctx context.Context, in *Word, db *gorm1.DB) (*Word, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(WordORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(WordORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type WordORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type WordORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm1.DB) error
}

// DefaultReadWord executes a basic gorm read call
func DefaultReadWord(ctx context.Context, in *Word, db *gorm1.DB) (*Word, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == go_uuid1.Nil {
		return nil, errors1.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(WordORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm2.ApplyFieldSelection(ctx, db, nil, &WordORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(WordORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := WordORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(WordORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type WordORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type WordORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type WordORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm1.DB) error
}

func DefaultDeleteWord(ctx context.Context, in *Word, db *gorm1.DB) error {
	if in == nil {
		return errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == go_uuid1.Nil {
		return errors1.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(WordORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&WordORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(WordORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type WordORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type WordORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm1.DB) error
}

func DefaultDeleteWordSet(ctx context.Context, in []*Word, db *gorm1.DB) error {
	if in == nil {
		return errors1.NilArgumentError
	}
	var err error
	keys := []go_uuid1.UUID{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == go_uuid1.Nil {
			return errors1.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&WordORM{})).(WordORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&WordORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&WordORM{})).(WordORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type WordORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Word, *gorm1.DB) (*gorm1.DB, error)
}
type WordORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Word, *gorm1.DB) error
}

// DefaultStrictUpdateWord clears first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateWord(ctx context.Context, in *Word, db *gorm1.DB) (*Word, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateWord")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &WordORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(WordORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	filterLanguage := LanguageORM{}
	if ormObj.Id == go_uuid1.Nil {
		return nil, errors1.EmptyIdError
	}
	filterLanguage.WordId = new(go_uuid1.UUID)
	*filterLanguage.WordId = ormObj.Id
	if err = db.Where(filterLanguage).Delete(LanguageORM{}).Error; err != nil {
		return nil, err
	}
	filterSkill := SkillORM{}
	if ormObj.Id == go_uuid1.Nil {
		return nil, errors1.EmptyIdError
	}
	filterSkill.WordId = new(go_uuid1.UUID)
	*filterSkill.WordId = ormObj.Id
	if err = db.Where(filterSkill).Delete(SkillORM{}).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(WordORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(WordORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type WordORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type WordORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type WordORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm1.DB) error
}

// DefaultPatchWord executes a basic gorm update call with patch behavior
func DefaultPatchWord(ctx context.Context, in *Word, updateMask *field_mask1.FieldMask, db *gorm1.DB) (*Word, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	var pbObj Word
	var err error
	if hook, ok := interface{}(&pbObj).(WordWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadWord(ctx, &Word{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(WordWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskWord(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(WordWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateWord(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(WordWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type WordWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Word, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type WordWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Word, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type WordWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Word, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type WordWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Word, *field_mask1.FieldMask, *gorm1.DB) error
}

// DefaultPatchSetWord executes a bulk gorm update call with patch behavior
func DefaultPatchSetWord(ctx context.Context, objects []*Word, updateMasks []*field_mask1.FieldMask, db *gorm1.DB) ([]*Word, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors1.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Word, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchWord(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskWord patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskWord(ctx context.Context, patchee *Word, patcher *Word, updateMask *field_mask1.FieldMask, prefix string, db *gorm1.DB) (*Word, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors1.NilArgumentError
	}
	var err error
	var updatedLanguage bool
	var updatedSkill bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"CreatedAt" {
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if f == prefix+"UpdatedAt" {
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
		if f == prefix+"DeletedAt" {
			patchee.DeletedAt = patcher.DeletedAt
			continue
		}
		if f == prefix+"Content" {
			patchee.Content = patcher.Content
			continue
		}
		if f == prefix+"AudioSrc" {
			patchee.AudioSrc = patcher.AudioSrc
			continue
		}
		if !updatedLanguage && strings.HasPrefix(f, prefix+"Language.") {
			updatedLanguage = true
			if patcher.Language == nil {
				patchee.Language = nil
				continue
			}
			if patchee.Language == nil {
				patchee.Language = &Language{}
			}
			if o, err := DefaultApplyFieldMaskLanguage(ctx, patchee.Language, patcher.Language, &field_mask1.FieldMask{Paths: updateMask.Paths[i:]}, prefix+"Language.", db); err != nil {
				return nil, err
			} else {
				patchee.Language = o
			}
			continue
		}
		if f == prefix+"Language" {
			updatedLanguage = true
			patchee.Language = patcher.Language
			continue
		}
		if !updatedSkill && strings.HasPrefix(f, prefix+"Skill.") {
			updatedSkill = true
			if patcher.Skill == nil {
				patchee.Skill = nil
				continue
			}
			if patchee.Skill == nil {
				patchee.Skill = &Skill{}
			}
			if o, err := DefaultApplyFieldMaskSkill(ctx, patchee.Skill, patcher.Skill, &field_mask1.FieldMask{Paths: updateMask.Paths[i:]}, prefix+"Skill.", db); err != nil {
				return nil, err
			} else {
				patchee.Skill = o
			}
			continue
		}
		if f == prefix+"Skill" {
			updatedSkill = true
			patchee.Skill = patcher.Skill
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListWord executes a gorm list call
func DefaultListWord(ctx context.Context, db *gorm1.DB) ([]*Word, error) {
	in := Word{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(WordORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm2.ApplyCollectionOperators(ctx, db, &WordORM{}, &Word{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(WordORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []WordORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(WordORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Word{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type WordORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type WordORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type WordORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm1.DB, *[]WordORM) error
}

// DefaultCreateLanguage executes a basic gorm create call
func DefaultCreateLanguage(ctx context.Context, in *Language, db *gorm1.DB) (*Language, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(LanguageORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(LanguageORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type LanguageORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type LanguageORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm1.DB) error
}

// DefaultReadLanguage executes a basic gorm read call
func DefaultReadLanguage(ctx context.Context, in *Language, db *gorm1.DB) (*Language, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == go_uuid1.Nil {
		return nil, errors1.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(LanguageORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm2.ApplyFieldSelection(ctx, db, nil, &LanguageORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(LanguageORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := LanguageORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(LanguageORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type LanguageORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type LanguageORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type LanguageORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm1.DB) error
}

func DefaultDeleteLanguage(ctx context.Context, in *Language, db *gorm1.DB) error {
	if in == nil {
		return errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == go_uuid1.Nil {
		return errors1.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(LanguageORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&LanguageORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(LanguageORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type LanguageORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type LanguageORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm1.DB) error
}

func DefaultDeleteLanguageSet(ctx context.Context, in []*Language, db *gorm1.DB) error {
	if in == nil {
		return errors1.NilArgumentError
	}
	var err error
	keys := []go_uuid1.UUID{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == go_uuid1.Nil {
			return errors1.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&LanguageORM{})).(LanguageORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&LanguageORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&LanguageORM{})).(LanguageORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type LanguageORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Language, *gorm1.DB) (*gorm1.DB, error)
}
type LanguageORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Language, *gorm1.DB) error
}

// DefaultStrictUpdateLanguage clears first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateLanguage(ctx context.Context, in *Language, db *gorm1.DB) (*Language, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateLanguage")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &LanguageORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(LanguageORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	filterSkills := SkillORM{}
	if ormObj.Id == go_uuid1.Nil {
		return nil, errors1.EmptyIdError
	}
	filterSkills.LanguageId = new(go_uuid1.UUID)
	*filterSkills.LanguageId = ormObj.Id
	if err = db.Where(filterSkills).Delete(SkillORM{}).Error; err != nil {
		return nil, err
	}
	filterWords := WordORM{}
	if ormObj.Id == go_uuid1.Nil {
		return nil, errors1.EmptyIdError
	}
	filterWords.LanguageId = new(go_uuid1.UUID)
	*filterWords.LanguageId = ormObj.Id
	if err = db.Where(filterWords).Delete(WordORM{}).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(LanguageORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(LanguageORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type LanguageORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type LanguageORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type LanguageORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm1.DB) error
}

// DefaultPatchLanguage executes a basic gorm update call with patch behavior
func DefaultPatchLanguage(ctx context.Context, in *Language, updateMask *field_mask1.FieldMask, db *gorm1.DB) (*Language, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	var pbObj Language
	var err error
	if hook, ok := interface{}(&pbObj).(LanguageWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadLanguage(ctx, &Language{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(LanguageWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskLanguage(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(LanguageWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateLanguage(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(LanguageWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type LanguageWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Language, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type LanguageWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Language, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type LanguageWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Language, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type LanguageWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Language, *field_mask1.FieldMask, *gorm1.DB) error
}

// DefaultPatchSetLanguage executes a bulk gorm update call with patch behavior
func DefaultPatchSetLanguage(ctx context.Context, objects []*Language, updateMasks []*field_mask1.FieldMask, db *gorm1.DB) ([]*Language, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors1.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Language, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchLanguage(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskLanguage patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskLanguage(ctx context.Context, patchee *Language, patcher *Language, updateMask *field_mask1.FieldMask, prefix string, db *gorm1.DB) (*Language, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors1.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"CreatedAt" {
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if f == prefix+"UpdatedAt" {
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
		if f == prefix+"DeletedAt" {
			patchee.DeletedAt = patcher.DeletedAt
			continue
		}
		if f == prefix+"Name" {
			patchee.Name = patcher.Name
			continue
		}
		if f == prefix+"Abbreviation" {
			patchee.Abbreviation = patcher.Abbreviation
			continue
		}
		if f == prefix+"FlagSrc" {
			patchee.FlagSrc = patcher.FlagSrc
			continue
		}
		if f == prefix+"Words" {
			patchee.Words = patcher.Words
			continue
		}
		if f == prefix+"Skills" {
			patchee.Skills = patcher.Skills
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListLanguage executes a gorm list call
func DefaultListLanguage(ctx context.Context, db *gorm1.DB) ([]*Language, error) {
	in := Language{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(LanguageORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm2.ApplyCollectionOperators(ctx, db, &LanguageORM{}, &Language{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(LanguageORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []LanguageORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(LanguageORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Language{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type LanguageORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type LanguageORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type LanguageORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm1.DB, *[]LanguageORM) error
}
